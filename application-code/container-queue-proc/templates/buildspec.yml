version: 0.2

phases:
  install:
    runtime-versions:
      python: 3.8.3
      docker: 20
  pre_build:
    commands:
      - for /f "delims=/ tokens=1,*" %%A in ("%REPO_URL%") do set REPOSITORY=%%A
      - aws ecr get-login-password --region %AWS_REGION% | docker login --username AWS --password-stdin %REPOSITORY%
      - REM Replace text in files (requires custom solution)
      - set COMMIT_HASH=%CODEBUILD_RESOLVED_SOURCE_VERSION:~0,7%
      - if "%COMMIT_HASH%"=="" set COMMIT_HASH=latest
      - set IMAGE_TAG=%COMMIT_HASH%
  build:
    commands:
      - docker build -t %REPO_URL% %FOLDER_PATH%
  post_build:
    commands:
      # - docker push %REPO_URL% || true #chicken & egg problem : ecr immutable this push will only works one time, but required for first deployment from terraform
      - docker tag %REPO_URL% %REPO_URL%:%IMAGE_TAG%
      - docker push %REPO_URL%:%IMAGE_TAG%
      - REM Update task definition (requires custom solution)
      - mkdir artifacts
      - copy tmp-ntd.json artifacts\task-definition.json

artifacts:
  files:
    - '**/*'
  base-directory: 'artifacts'
  discard-paths: yes


version: 0.2
env:
  shell: cmd.exe
phases:
  install:
    runtime-versions:
      python: 3.8.3
      docker: 20
  pre_build:
    commands:
      - echo "Pre build"
      - $REPOSITORY = $env:REPO_URL -replace "/[^/]*$", ""
      - $password = aws ecr get-login-password
      - echo $password | docker login --username AWS --password-stdin $REPOSITORY
      - powershell -Command "(Get-Content -path ./application-code/container-queue-proc/src/app.py) -replace '<QUEUE_NAME>', '$QUEUE_NAME' | Set-Content -Path ./application-code/container-queue-proc/src/app.py"
      - powershell -Command "(Get-Content -path ./application-code/container-queue-proc/src/app.py) -replace '<DESTINATION_BUCKET>', '$DESTINATION_BUCKET' | Set-Content -Path ./application-code/container-queue-proc/src/app.py"
      - $COMMIT_HASH = $env:CODEBUILD_RESOLVED_SOURCE_VERSION.substring(0, 7)
      - if (!$COMMIT_HASH) { $COMMIT_HASH = 'latest' }; $IMAGE_TAG = $COMMIT_HASH
  build:
    commands:
      - powershell -Command "docker build -t $env:REPO_URL -f Dockerfile.windows $env:FOLDER_PATH"
  post_build:
    commands:
      - powershell -Command "docker tag $env:REPO_URL $env:REPO_URL:$IMAGE_TAG"
      - powershell -Command "docker push $env:REPO_URL:$IMAGE_TAG"
      - |
          TASK_DEFINITION=$(aws ecs describe-task-definition --task-definition $TASK_DEFINITION_FAMILY --query '{
                containerDefinitions: taskDefinition.containerDefinitions,
                family: taskDefinition.family,
                taskRoleArn: taskDefinition.taskRoleArn,
                executionRoleArn: taskDefinition.executionRoleArn,
                networkMode: taskDefinition.networkMode,
                volumes: taskDefinition.volumes,
                placementConstraints: taskDefinition.placementConstraints,
                requiresCompatibilities: taskDefinition.requiresCompatibilities,
                cpu: taskDefinition.cpu,
                memory: taskDefinition.memory
            }' | Out-File -Encoding utf8 tmp-td.json)
      - $json = Get-Content -Raw -Path tmp-td.json | ConvertFrom-Json
      - $json.containerDefinitions[0].image = "$env:REPO_URL:$IMAGE_TAG"
      - $json | ConvertTo-Json -Depth 20 | Set-Content tmp-ntd.json
      - aws ecs register-task-definition --cli-input-json file://tmp-ntd.json
      - mkdir artifacts
      - cp tmp-ntd.json artifacts/task-definition.json

artifacts:
  files:
    - '**/*'
  base-directory: 'artifacts'
  discard-paths: yes
